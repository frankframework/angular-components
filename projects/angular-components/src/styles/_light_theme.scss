@use './variables';

ff-button *,
ff-search *,
ff-alert *,
ff-chip *,
ff-datatable * {
  font-family: Inter, sans-serif;
  box-sizing: border-box;
}

ff-button > button {
  color: variables.$ff-color-light;
  background-color: variables.$ff-bgcolor-dark-gray;
  border-color: variables.$ff-bgcolor-dark-gray;

  &:hover {
    color: variables.$ff-color-dark;
    background-color: variables.$ff-bgcolor-yellow;
  }

  &:active:not(:disabled) {
    color: variables.$ff-color-dark;
    background-color: variables.$ff-bgcolor-yellow;
    border: 2px solid variables.$ff-border-yellow;
  }

  &:disabled {
    color: variables.$ff-color-gray;
    background-color: variables.$ff-bgcolor-gray;
    border-color: variables.$ff-bgcolor-gray;
  }

  &.active {
    color: variables.$ff-color-dark;
    background-color: transparent;
    border: 2px dashed variables.$ff-border-gray;

    &:hover {
      color: variables.$ff-color-dark;
      background-color: variables.$ff-bgcolor-yellow;
      border-color: variables.$ff-bgcolor-yellow;
    }
  }
}

ff-search > label {
  color: variables.$ff-color-gray;
  background-color: variables.$ff-bgcolor-white;
  border: 1px solid variables.$ff-bgcolor-gray;

  &.disabled {
    background-color: variables.$ff-bgcolor-gray;
  }

  input {
    color: inherit;

    &::placeholder {
      color: variables.hex-with-opacity(variables.$ff-color-gray, 0.75);
    }
  }

  kbd {
    color: variables.$ff-color-gray;
    border: 1px solid variables.$ff-border-gray;
  }
}

$ff-alert-light-opacity: 0.1;
$ff-alert-light-border-opacity: 0.2;

ff-alert > .ff-alert {
  color: variables.$ff-color-dark;
  border: solid variables.$ff-border-gray;

  &.info {
    $light-border-side: variables.hex-with-opacity(variables.$ff-alert-info, $ff-alert-light-border-opacity);
    border-color: $light-border-side $light-border-side $light-border-side variables.$ff-alert-info;
    background-color: variables.hex-with-opacity(variables.$ff-alert-info, $ff-alert-light-opacity);
  }

  &.success {
    $light-border-side: variables.hex-with-opacity(variables.$ff-alert-success, $ff-alert-light-border-opacity);
    border-color: $light-border-side $light-border-side $light-border-side variables.$ff-alert-success;
    background-color: variables.hex-with-opacity(variables.$ff-alert-success, $ff-alert-light-opacity);
  }

  &.warning {
    $light-border-side: variables.hex-with-opacity(variables.$ff-alert-warning, $ff-alert-light-border-opacity);
    border-color: $light-border-side $light-border-side $light-border-side variables.$ff-alert-warning;
    background-color: variables.hex-with-opacity(variables.$ff-alert-warning, $ff-alert-light-opacity);
  }

  &.error {
    $light-border-side: variables.hex-with-opacity(variables.$ff-alert-error, $ff-alert-light-border-opacity);
    border-color: $light-border-side $light-border-side $light-border-side variables.$ff-alert-error;
    background-color: variables.hex-with-opacity(variables.$ff-alert-error, $ff-alert-light-opacity);
  }
}

ff-chip > span {
  border: 1px solid variables.$ff-border-gray;
}

ff-datatable > .dt-wrapper {
  color: variables.$ff-color-dark;

  table {
    margin-top: 4px;
    border-collapse: collapse;
  }

  & th, & td {
    border: 1px solid variables.$ff-border-gray;
    border-width: 1px 0;
  }
}

th[sortable] {
  position: relative;
  cursor: pointer;

  span.sort-icon {
    position: absolute;
    right: 0;
  }
}

.collapsed {
  height: 0;
  overflow: hidden;
}
